@startuml
title Embedded System: M1 (Active Scan) & M2 (Passive Listen)

actor User
actor "Web Browser Client" as BrowserClient

' --- Shared Keyboard Hardware ---
component "Keyboard Matrix (16 pins, 8x8 grid)" as Matrix

' --- M1: Original Keyboard Microcontroller ---
package "M1 (Existing Keyboard MCU)" {
  component "M1_GPIO" as M1_GPIO
  component "M1_Matrix_Scanner" as M1_Scanner
}

' --- M2: ESP32 - Passive Listener ---
package "M2 (ESP32 - Piano Reader)" {
  component "M2_GPIO (16 High-Z Inputs)" as M2_GPIO_Inputs
  component "M2_WiFi_Module" as M2_Wifi

  package "M2 Firmware (Simplified)" as M2_Firmware_Package {
    component "Firmware_Process_Flow" as M2_ProcessFlow
    note right of M2_ProcessFlow
      **Key Processing Logic:**
      1. Sample raw data at Nyquist frequency
         from the 16 wires shared by M1.
      2. Interpret Row (scan) & Column (sense) States.
      3. Construct `currentGrid[][]`.
      4. Compare `currentGrid` with `lastGrid`.
      5. If (State Changed?):
         - Format Note Data String.
         - Send WebSocket Message via WiFi.
      6. Else:
         - Do nothing or minimal processing.
    end note
  }
}


' --- Physical Interactions & Connections ---
User -right-> Matrix : "Presses Key(s)"
M1_GPIO -up-> Matrix : "Drives Rows (Active LOW)\nSenses Columns"
Matrix -left-> M2_GPIO_Inputs : "Row & Column Electrical States\n(Shared with M1)"

' --- M1 Internal Flow (Simplified) ---
M1_Scanner -> M1_GPIO

' --- M2 Firmware Data Flow (Simplified) ---
M2_GPIO_Inputs --> M2_ProcessFlow : "Raw states of 16 lines"
M2_ProcessFlow --> M2_Wifi : "Data for WebSocket Message"
M2_Wifi -right-> BrowserClient : "String of Active Notes / Empty String\n(via Network)"
@enduml